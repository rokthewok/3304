(define navigate (lambda (dest path) 
	(cond ((null? path) (append '(not found:) (list dest)))
		((null? (car path)) (append '(not found:) (list dest)))
		((= dest (car path)) (append '(found:) (list dest)))
		((< dest (car path)) (append (navigate dest (car (cdr path))) (list (car path))))
		((> dest (car path)) (append (navigate dest (car (cdr (cdr path)))) (list (car path))))
		)))

(define (append list1 list2)
	(cond ((null? list1) list2)
		(else (cons (car list1) (append (cdr list1) list2)))))

(navigate 10 '(10 () ()))
(navigate 10 '(() (10) ()))
(navigate 10 '(12 (10) ()))
(navigate 10 '(5 () (10)))
(navigate 10 '(5 () (18 () (22 () ()))))
