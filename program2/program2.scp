(define navigate (lambda (dest path) 
	(cond ((null? path) (append '(not found:) (list dest)))
		((null? (car path)) (append '(not found:) (list dest)))
		((= dest (car path)) (append '(found:) (list dest)))
		((< dest (car path))
			(cond ((eq? 'not (car (navigate dest (car (cdr path))))) (navigate dest (car (cdr path))))
				(else 
			(append (append (list (car (navigate dest (car (cdr path)))))
					(list (car path) 'R) 
					(cdr (navigate dest (car (cdr path)))))))))
		((> dest (car path))
			(cond ((eq? 'not (car (navigate dest (car (cdr (cdr path)))))) (navigate dest (car (cdr (cdr path)))))
				(else
			(append (append (list (car (navigate dest (car (cdr (cdr path))))))
				(list (car path) 'L)
				(cdr (navigate dest (car (cdr (cdr path)))))))))
		))))

(define pathConcat (lambda (func1 func2 list1)
	(cond ((eq 'not (car func1)) func1)
		(else (append (append (list (car func1)) list1)
					(cdr func2))))))

(define (append list1 list2)
	(cond ((null? list1) list2)
		(else (cons (car list1) (append (cdr list1) list2)))))

(navigate 10 '(10 () ()))
(navigate 10 '(() (10) ()))
(navigate 10 '(12 (10) ()))
(navigate 10 '(5 () (10)))
(navigate 10 '(5 () (18 () (22 () ()))))
